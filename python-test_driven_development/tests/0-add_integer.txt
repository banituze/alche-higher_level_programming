A test to for adding two integers

Import Python module + collections
>>> import sys
>>> sys.path.insert(1, '../')
>>> lib = __import__("0-add_integer")
>>> add_integer = lib.add_integer

# Normal addition test
>>> add_integer(0)
98
>>> add_integer(-1)
97
>>> add_integer(10.5)
108

# Type Errors
>>> add_integer(10+5j)
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer([])
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer({})
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer(set())
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer("")
Traceback (most recent call last):
...
TypeError: a must be an integer

# Two input addition type errors
>>> add_integer(10, 10+5j)
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> add_integer(10, [])
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> add_integer(10, {})
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> add_integer(10, set())
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer(10, "")
Traceback (most recent call last):
...
TypeError: b must be an integer

# Additional Valid Additions
>>> add_integer(1, 1)
2
>>> add_integer(10, -4)
6
>>> add_integer(-10, -4)
-14
>>> add_integer(2)
100
>>> add_integer(2.5, 5)
7
>>> add_integer(2.5)
100
>>> add_integer(10.5, -2)
8
>>> add_integer(-10.5, -2)
-12
>>> add_integer(1.2, 4.2)
5

# Invalid Inputs
>>> add_integer(4, "School")
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer('c', 1)
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer('c', 'm')
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer((1, 1))
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer(123, [])
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> add_integer("Hello")
Traceback (most recent call last):
...
TypeError: a must be an integer

# Overflow and NaN Cases
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
>>> add_integer(float('inf'), float('-inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
>>> add_integer(0, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
>>> add_integer(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
